import tensorflow as tf
from tensorflow.keras.applications import VGG16
from tensorflow.keras.models import Model

# Load the pre-trained model
model = VGG16(weights='imagenet', include_top=False)

# Select a target layer
last_conv_layer = model.get_layer('block5_conv3')

# Create a model to output the activations of the target layer
model = Model(inputs=model.input, outputs=last_conv_layer.output)

# Function to compute Grad-CAM
def grad_cam(model, img, class_index):
    with tf.GradientTape() as tape:
        inputs = tf.constant(img[np.newaxis, ...])
        with tf.GradientTape() as tape:
            outputs = model(inputs)
            loss = outputs[:, class_index]
        grads = tape.gradient(loss, inputs)[0]

    pooled_grads = tf.reduce_mean(grads, axis=(0, 1))
    heatmap = tf.reduce_mean(tf.multiply(pooled_grads, last_conv_layer.output[0]), axis=-1)
    heatmap = np.maximum(heatmap, 0)
    heatmap /= np.max(heatmap)

    return heatmap

# Load an image and preprocess it
img = ...  # Load your image and preprocess it

# Get the predicted class index
predicted_class = ...  # Use your model to predict the class

# Compute the Grad-CAM heatmap
heatmap = grad_cam(model, img, predicted_class)

# Overlay the heatmap on the original image
img = cv2.imread(img_path)
heatmap = cv2.resize(heatmap, (img.shape[1], img.shape[0]))
heatmap = np.uint8(255 * heatmap)
heatmap = cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)
superimposed_img = cv2.addWeighted(img, 0.6, heatmap, 0.4, 0)
